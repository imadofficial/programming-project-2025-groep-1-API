openapi: '3.1.1'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Use a JWT access token in the Authorization header:
        `Authorization: Bearer <access_token>`.


security:
  - bearerAuth: []


info:
  title: EHB Match API
  version: '0.1'

tags:
  - name: Auth
    description: >
      Authentication endpoints for the API.
  - name: Registration
    description: >
      Endpoints for user registration and management.
  - name: Information
    description: >
      Endpoints for retrieving available informations like skills.
  - name: Bedrijven
    description: >
      Endpoints for managing companies.
  - name: Studenten
    description: >
      Endpoints for managing students.

servers:
  - url: https://api.ehb-match.me
    description: Dev Server

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login to the API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'janjansen'
                password:
                  type: string
                  example: 'password123'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  accessToken:
                    type: string
                    example: 'your_access_token_here'
                  accessTokenExpiresAt:
                    type: string
                    format: date-time
                    example: '2023-10-01T00:15:00Z'
                  refreshTokenExpiresAt:
                    type: string
                    format: date-time
                    example: '2023-10-08T00:00:00Z'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh the access token
      responses:
        '200':
          description: Successful token refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Token refreshed successfully'
                  accessToken:
                    type: string
                    example: 'new_access_token_here'
                  accessTokenExpiresAt:
                    type: string
                    format: date-time
                    example: '2023-10-01T12:15:00Z'
                  refreshTokenExpiresAt:
                    type: string
                    format: date-time
                    example: '2023-10-08T12:00:00Z'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout from the API
      description: >
        This endpoint logs the user out and removes the refresh token.
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout successful'

  /auth/register/user:
    post:
      tags:
        - Registration
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'janjansen@example.com'
                password:
                  type: string
                  example: 'password123'
  /auth/register/admin:
    post:
      tags:
        - Registration
      summary: Register a new admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'admin@example.com'
                password:
                  type: string
                  example: 'password123'

  /skills:
    description: List of available skills
    get:
      tags:
        - Information
      summary: Get all available skills
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    skill:
                      type: string
                      example: 'JavaScript'

  /opleidingen:
    description: List of available opleidingen
    get:
      tags:
        - Information
      summary: Get all available opleidingen
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    naam:
                      type: string
                      example: 'Informatica'
                    type:
                      type: string

  /bedrijven:
    description: List of companies
    post:
      tags:
        - Bedrijven
      summary: 'Create a new company [NOTE: This endpoint is not implemented yet]'
      description: 'Create a new company [NOTE: This endpoint is not implemented yet]'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
    get:
      tags:
        - Bedrijven
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gebruiker_id:
                      type: integer
                    naam:
                      type: string
                    plaats:
                      type: string
                    contact_email:
                      type: string
                      format: email
                    linkedin:
                      type: string
                      format: uri

  /bedrijven/{id}:
    description: Get a specific company by ID
    get:
      tags:
        - Bedrijven
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gebruiker_id:
                    type: integer
                  naam:
                    type: string 
                    example: 'Tech Solutions'
                  plaats:
                    type: string
                  contact_email:
                    type: string
                    format: email
                    example: 'info@techsolutions.com'
                  linkedin:
                    type: string
                    format: uri
                    example: 'https://www.linkedin.com/company/techsolutions'

  /studenten:
    description: List of students
    post:
      tags:
        - Studenten
      summary: 'Create a new student [NOTE: This endpoint is not implemented yet]'
      description: 'Create a new student [NOTE: This endpoint is not implemented yet]'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
    get:
      tags:
        - Studenten
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gebruiker_id:
                      type: integer
                    voornaam:
                      type: string
                      example: 'Jan'
                    achternaam:
                      type: string
                      example: 'Jansen'
                    linkedin:
                      type: string
                      format: uri
                    profiel_foto:
                      type: string
                      format: uri
                    studiejaar:
                      type: integer
                    opleiding_id:
                      type: integer



  /studenten/{id}:
    description: Get a specific student by ID
    get:
      tags:
        - Studenten
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gebruiker_id:
                    type: integer
                  voornaam:
                    type: string
                    example: 'Jan'
                  achternaam:
                    type: string
                    example: 'Jansen'
                  linkedin:
                    type: string
                    format: uri
                  profiel_foto:
                    type: string
                    format: uri
                  studiejaar:
                    type: integer
                  opleiding_id:
                    type: integer