openapi: '3.1.1'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Use a JWT access token in the Authorization header:
        `Authorization: Bearer <access_token>`.
  schemas:
    Student:
      type: object
      description: A student user object.
      required:
        - type
        - gebruiker_id
        - voornaam
        - achternaam
        - linkedin
        - profiel_foto
        - studiejaar
        - opleiding_id
      properties:
        type:
          type: integer
          enum: [2]
          description: The type of user (always "student" for this schema).
        id:
          type: integer
          description: The unique user ID.
        voornaam:
          type: string
          description: The student's first name.
        achternaam:
          type: string
          description: The student's last name.
        linkedin:
          type: string
          format: uri
          description: The student's LinkedIn profile URL.
        profiel_foto_key:
          type: string
          description: The key for the student's profile photo.
          example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
        profiel_foto_url:
          type: string
          format: uri
          description: The student's profile photo URL.
          example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
        studiejaar:
          type: integer
          description: The student's year of study.
        opleiding_id:
          type: integer
          description: The ID of the student's opleiding (program).
        date_of_birth:
          type: string
          format: date
          description: The student's date of birth.
        contact_email:
          type: string
          format: email
          description: The student's contact email.
      example:
        type: 2
        id: 1
        voornaam: Jan
        achternaam: Jansen
        linkedin: /in/janjansen
        profiel_foto_key: 69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh
        profiel_foto_url: https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh
        studiejaar: 2
        opleiding_id: 1
        date_of_birth: '2000-01-01'
        contact_email: 'jan.jansen@example.com'
    Bedrijf:
      type: object
      description: A company (bedrijf) user object.
      required:
        - type
        - id
        - naam
        - plaats
        - contact_email
        - linkedin
        - profiel_foto
      properties:
        type:
          type: integer
          enum: [3]
          description: The type of user (always "bedrijf" for this schema).
        id:
          type: integer
          description: The unique user ID.
        naam:
          type: string
          description: The company's name.
        plaats:
          type: string
          description: The company's location.
        contact_email:
          type: string
          format: email
          description: The company's contact email.
        linkedin:
          type: string
          format: uri
          description: The company's LinkedIn profile URL.
        profiel_foto_key:
          type: string
          description: The key for the company's profile photo.
          example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
        profiel_foto_url:
          type: string
          format: uri
          description: The company's profile photo URL.
          example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
      example:
        type: 3
        id: 2
        naam: Tech Solutions
        plaats: Brussel
        contact_email: contact@techsolutions.com
        linkedin: /company/techsolutions
        profiel_foto_key: 69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh
        profiel_foto_url: https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh
    Admin:
      type: object
      description: An admin user object.
      required:
        - type
        - id
        - email
      properties:
        type:
          type: integer
          enum: [1]
          description: The type of user (always "admin" for this schema).
        id:
          type: integer
          description: The unique user ID.
        email:
          type: string
          format: email
          example: 'admin@example.com'
          description: The admin's email address.
      example:
        type: 1
        id: 3
        email: admin@example.com


security:
  - bearerAuth: []


info:
  title: EHB Match API
  version: '0.4'

tags:
  - name: Auth
    description: >
      Authentication endpoints for the API.
  - name: Profielfotos
    description: >
      Endpoints for managing user profile photos.
  - name: Registration
    description: >
      Endpoints for user registration and management.
  - name: Users
    description: >
      Endpoints for managing users.
  - name: Discover
    description: >
      Endpoints for discovering companies and students.
  - name: Bedrijven
    description: >
      Endpoints for managing companies.
  - name: Studenten
    description: >
      Endpoints for managing students.
  - name: Opleidingen
    description: >
      Endpoints for managing educational programs (opleidingen).
  - name: Skills
    description: >
      Endpoints for managing skills.
  - name: Speeddates
    description: >
      Endpoints for managing speeddates.
  - name: Stands
    description: >
      Endpoints for managing stands.

servers:
  - url: https://api.ehb-match.me
    description: Dev Server

paths:
  /auth/info:
    get:
      tags:
        - Auth
      summary: Get information about the authenticated user
      description: >
        This endpoint returns information about the authenticated user.
        The user must be logged in and provide a valid access token.
        The response includes the user's type (student, bedrijf, or admin) and their details.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                discriminator:
                  propertyName: type
                  mapping:
                    1: '#/components/schemas/Admin'
                    2: '#/components/schemas/Student'
                    3: '#/components/schemas/Bedrijf'
                oneOf:
                 - $ref: '#/components/schemas/Student'
                 - $ref: '#/components/schemas/Bedrijf'
                 - $ref: '#/components/schemas/Admin'


  /auth/login:
    post:
      tags:
        - Auth
      summary: Login to the API
      description: >
        This endpoint allows users to log in to the API.
        It returns an access token and stores a refresh token in the cookies upon successful login.
        The access token is valid for 15 minutes, and the refresh token is valid for 7 days.
        Use the access token for subsequent requests to protected endpoints.
        Once the access token expires, make a POST request to the /auth/refresh endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'jan.jansen@example.com'
                password:
                  type: string
                  example: 'password123'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  user:
                    oneOf:
                      - $ref: '#/components/schemas/Student'
                      - $ref: '#/components/schemas/Bedrijf'
                      - $ref: '#/components/schemas/Admin'
                  accessToken:
                    type: string
                    example: 'your_access_token_here'
                  accessTokenExpiresAt:
                    type: string
                    format: date-time
                    example: '2023-10-01T00:15:00Z'
                  refreshTokenExpiresAt:
                    type: string
                    format: date-time
                    example: '2023-10-08T00:00:00Z'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh the access token
      description: >
        This endpoint allows users to refresh their access token using a valid refresh token.
        The refresh token is stored in the cookies.
        If the refresh token is valid, a new access token will be issued.
        The new access token will be valid for 15 minutes.
      responses:
        '200':
          description: Successful token refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Token refreshed successfully'
                  accessToken:
                    type: string
                    example: 'new_access_token_here'
                  accessTokenExpiresAt:
                    type: string
                    format: date-time
                    example: '2023-10-01T12:15:00Z'
                  refreshTokenExpiresAt:
                    type: string
                    format: date-time
                    example: '2023-10-08T12:00:00Z'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout from the API
      description: >
        This endpoint logs the user out and removes the refresh token.
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout successful'

  /profielfotos:
    post:
      tags:
        - Profielfotos
      operationId: uploadProfilePhoto
      summary: Upload a profile photo
      description: >
        This endpoint allows users to upload a profile photo (Maximum 2MB).
        Allowed file types are: jpg, jpeg, png, gif. Other file types will be rejected for security reasons.
        The photo will be stored and associated with the user's account.
        Please use the profiel_foto_key returned in the response to register the profile photo with a user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The profile photo file to upload
                  required: true
      responses:
        '200':
          description: Successful upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Profile photo uploaded successfully'
                  profiel_foto_key:
                    type: string
                    example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                  profiel_foto_url:
                    type: string
                    format: uri
                    example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'

  /bedrijven/{bedrijfID}/profielfoto:
    put:
      tags:
        - Profielfotos
      operationId: updateCompanyProfilePhoto
      summary: Update a company's profile photo
      description: >
        This endpoint allows companies to update their profile photo.
        The photo will be stored and associated with the company's account.
      security:
        - bearerAuth: []
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profiel_foto:
                  type: string
                  description: >
                    The profile photo key. This key was obtained from https://api.ehb-match.me/profielfotos.
                    If not provided, no profile photo will be used.
                  example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Company profile photo updated successfully'
                  bedrijf:
                    type: object
                    properties:
                      gebruiker_id:
                        type: integer
                        example: 42
                      naam:
                        type: string
                        example: 'Tech Solutions'
                      plaats:
                        type: string
                        example: 'Brussel'
                      contact_email:
                        type: string
                        format: email
                        example: 'info@techsolutions.com'
                      linkedin:
                        type: string
                        format: uri
                        example: 'https://www.linkedin.com/company/techsolutions'
                      profiel_foto_key:
                        type: string
                        example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                      profiel_foto_url:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
    delete:
      tags:
        - Profielfotos
      operationId: deleteCompanyProfilePhoto
      summary: Delete a company's profile photo
      description: >
        This endpoint allows companies to delete their profile photo.
        The photo will be removed from the company's account.
      security:
        - bearerAuth: []
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Company profile photo deleted successfully'
                  bedrijf:
                    type: object
                    properties:
                      gebruiker_id:
                        type: integer
                        example: 42
                      naam:
                        type: string
                        example: 'Tech Solutions'
                      plaats:
                        type: string
                        example: 'Brussel'
                      contact_email:
                        type: string
                        format: email
                        example: 'info@techsolutions.com'
                      linkedin:
                        type: string
                        format: uri
                        example: 'https://www.linkedin.com/company/techsolutions'
                      profiel_foto_key:
                        type: string
                        example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                      profiel_foto_url:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'

  /studenten/{studentID}/profielfoto:
    put:
      tags:
        - Profielfotos
      operationId: updateStudentProfilePhoto
      summary: Update a student's profile photo
      description: >
        This endpoint allows students to update their profile photo.
        The photo will be stored and associated with the student's account.
      security:
        - bearerAuth: []
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profiel_foto:
                  type: string
                  description: >
                    The profile photo key. This key was obtained from https://api.ehb-match.me/profielfotos.
                    If not provided, no profile photo will be used.
                  example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Student profile photo updated successfully'
                  student:
                    type: object
                    properties:
                      gebruiker_id:
                        type: integer
                        example: 42
                      voornaam:
                        type: string
                        example: 'Jan'
                      achternaam:
                        type: string
                        example: 'Jansen'
                      linkedin:
                        type: string
                        format: uri
                        example: '/in/janjansen'
                      profiel_foto_key:
                        type: string
                        example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                      profiel_foto_url:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                      studiejaar:
                        type: integer
                        example: 2
                      opleiding_id:
                        type: integer
                        example: 1
                      date_of_birth:
                        type: string
                        format: date
                        example: '1970-01-01'
                      contact_email:
                        type: string
                        format: email
                        example: 'jan.jansen@example.com'
    delete:
      tags:
        - Profielfotos
      operationId: deleteStudentProfilePhoto
      summary: Delete a student's profile photo
      description: >
        This endpoint allows students to delete their profile photo.
        The photo will be removed from the student's account.
      security:
        - bearerAuth: []
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Student profile photo deleted successfully'
                  student:
                    type: object
                    properties:
                      gebruiker_id:
                        type: integer
                        example: 42
                      voornaam:
                        type: string
                        example: 'Jan'
                      achternaam:
                        type: string
                        example: 'Jansen'
                      linkedin:
                        type: string
                        format: uri
                        example: '/in/janjansen'
                      profiel_foto_key:
                        type: string
                        example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                      profiel_foto_url:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                      studiejaar:
                        type: integer
                        example: 2
                      opleiding_id:
                        type: integer
                        example: 1
                      date_of_birth:
                        type: string
                        format: date
                        example: '1970-01-01'
                      contact_email:
                        type: string
                        format: email
                        example: 'jan.jansen@example.com'

  /auth/register/user:
    post:
      tags:
        - Registration
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: 'janjansen@example.com'
                password:
                  type: string
                  example: 'password123'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User registered successfully'
                  id:
                    type: integer
                    example: 42
  /auth/register/admin:
    post:
      tags:
        - Registration
      summary: Register a new admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: 'admin@example.com'
                password:
                  type: string
                  example: 'password123'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Admin registered successfully'
                  id:
                    type: integer
                    example: 42
  
  /auth/register/student:
    post:
      tags:
        - Registration
      summary: Register a new student account
      description: >
        This endpoint allows the registration of a new student account.
        The student must provide their email, password, first name, last name,
        LinkedIn profile, profile photo, study year, and opleiding ID.
        Please use the profiel_foto_key returned in the response of the profile photo upload endpoint to register the profile photo with a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - voornaam
                - achternaam
                - studiejaar
                - opleiding_id
                - date_of_birth
              properties:
                email:
                  type: string
                  format: email
                  example: 'jan.jansen@example.com'
                password:
                  type: string
                  example: 'password123'
                voornaam:
                  type: string
                  example: 'Jan'
                achternaam:
                  type: string
                  example: 'Jansen'
                linkedin:
                  type: string
                  format: uri
                  example: '/in/janjansen'
                profiel_foto:
                  type: string
                  description: >
                    The profile photo key. This key was obtained from https://api.ehb-match.me/profielfotos.
                    If not provided, no profile photo will be used.
                  example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                studiejaar:
                  type: integer
                  example: 2
                opleiding_id:
                  type: integer
                  example: 1
                date_of_birth:
                  type: string
                  format: date
                  example: '1970-01-01'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Student registered successfully'
                  id:
                    type: integer
                    example: 42

  /auth/register/bedrijf:
    post:
      tags:
        - Registration
      summary: Register a new company
      description: >
        This endpoint allows the registration of a new company account.
        The company must provide their email, password, name, location,
        contact email, LinkedIn profile, and profile photo.
        Please use the profiel_foto_key returned in the response of the profile photo upload endpoint to register the profile photo with a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - naam
                - plaats
                - contact_email
              properties:
                email:
                  type: string
                  format: email
                  example: 'info@techsolutions.com'
                password:
                  type: string
                  example: 'password123'
                naam:
                  type: string
                  example: 'Tech Solutions'
                plaats:
                  type: string
                  example: 'Brussel'
                contact_email:
                  type: string
                  format: email
                  example: 'contact@techsolutions.com'
                linkedin:
                  type: string
                  format: uri
                  example: '/company/techsolutions'
                profiel_foto:
                  type: string
                  description: >
                    The profile photo key. This key was obtained from https://api.ehb-match.me/profielfotos.
                    If not provided, no profile photo will be used.
                  example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Company registered successfully'
                  id:
                    type: integer
                    example: 42

  /user/{userID}:
    delete:
      tags:
        - Users
      summary: Delete a user and their associated student or company profile
      description: >
        This endpoint allows an admin to delete a user by their ID.
        The user and their associated profile will be removed from the system.
        Only accessible by admin users.
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user's email or password
      description: >
        This endpoint allows an admin to update a user's email or password.
        At least one field must be provided in the request body.
        Only accessible by the user themselves or an admin.
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        summary: User data to update
        description: >
          At least one field must be provided in the request body.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'jan.jansen@example.com'
                password:
                  type: string
                  example: 'newpassword123'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User updated successfully'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 42
                      email:
                        type: string
                        format: email
                        example: 'jan.jansen@example.com'
                      type:
                        type: integer
                        enum: [0, 1, 2, 3]
                        description: >
                          The type of user (0 for user, 1 for admin, 2 for student, 3 for bedrijf).
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Forbidden: You can only update your own user record or must be admin.'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'

  /discover/bedrijven:
    description: Discover companies
    get:
      summary: Discover bedrijven for a student
      description: >
        Returns a list of companies (bedrijven) ordered by most relevant functie, opleiding and skills matches for a given student.
        If `suggestions` is true (default), results are weighted by functie, opleiding and skills. If false, companies that want the student's functie are listed first, then opleiding, then others, all ordered by skill matches.
      tags:
        - Discover
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
          description: The id of the student to compare to. If omitted, uses the authenticated user.
        - name: suggestions
          in: query
          required: false
          schema:
            type: boolean
            default: true
          description: >
            If true (default), results are weighted by functie, opleiding and skills. If false, companies that want the student's functie are listed first, then opleiding, then others, all ordered by skill matches.
        - name: onlyNew
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            If true, only returns companies that have not been matched with the student before.
            This is used to avoid showing the same companies multiple times.
      responses:
        '200':
          description: List of bedrijven ordered by relevance
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gebruiker_id:
                      type: integer
                    naam:
                      type: string
                    plaats:
                      type: string
                    contact_email:
                      type: string
                      format: email
                    linkedin:
                      type: string
                      format: uri
                    profiel_foto_key:
                      type: string
                      example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                    profiel_foto_url:
                      type: string
                      format: uri
                      example: 'https://example.com/company_logo.jpg'
                    id_sector:
                      type: integer
                      description: >
                        The sector ID of the company.
                        This is used to filter companies by sector.
                      example: 1
                    functie_matches:
                      type: boolean
                      description: >
                        Indicates if the company is looking for students for a functie that matches the authenticated user.
                        True if the company is looking for a matching functie, false otherwise.
                      example: 1
                    opleiding_matches:
                      type: boolean
                      description: >
                        Indicates if the company is looking for students from the same opleiding as the authenticated user.
                        True if the company is looking for students from the same opleiding, false otherwise.
                      example: 1
                    skill_matches:
                      type: integer
                      description: >
                        The number of skill matches between the company and the student.
                        This is used to order the results by relevance.
                      example: 5
                    match_score:
                      type: number
                      format: float
                      description: >
                        A score representing the match between the company and the student.
                        This is used to order the results by relevance.
                      example: 5
                    match_percentage:
                      type: number
                      format: float
                      description: >
                        A percentage representing the match between the company and the student.
                        This is used to order the results by relevance.
                      example: 85.5

  /discover/studenten:
    description: Discover students
    get:
      summary: Discover studenten for a bedrijf
      description: >
        Returns a list of students ordered by most relevant functie, opleiding and skills matches for a given bedrijf.
        If `suggestions` is true (default), results are weighted by functie, opleiding and skills. If false, students with matching functie are listed first, then opleiding, then others, all ordered by skill matches.
      tags:
        - Discover
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
          description: The id of the bedrijf to compare to. If omitted, uses the authenticated user.
        - name: suggestions
          in: query
          required: false
          schema:
            type: boolean
            default: true
          description: >
            If true (default), results are weighted by functie, opleiding and skills. If false, students with matching functie are listed first, then opleiding, then others, all ordered by skill matches.
        - name: onlyNew
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            If true, only returns students that have not been matched with the bedrijf before.
            This is used to avoid showing the same students multiple times.
      responses:
        '200':
          description: List of studenten ordered by relevance
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gebruiker_id:
                      type: integer
                    voornaam:
                      type: string
                    achternaam:
                      type: string
                    linkedin:
                      type: string
                      format: uri
                    profiel_foto_key:
                      type: string
                      example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                    profiel_foto_url:
                      type: string
                      format: uri
                    studiejaar:
                      type: integer
                    opleiding_id:
                      type: integer
                    date_of_birth:
                      type: string
                      format: date
                      example: '2006-05-16'
                    contact_email:
                      type: string
                      format: email
                      example: 'jan.jansen@example.com'
                    functie_matches:
                      type: boolean
                      description: >
                        Indicates if the student is looking for a functie that matches the bedrijf.
                        True if the student is looking for a matching functie, false otherwise.
                      example: 1
                    opleiding_matches:
                      type: boolean
                      description: >
                        Indicates if the student is from the same opleiding as the authenticated user.
                        True if the student is from the same opleiding, false otherwise.
                      example: 1
                    skill_matches:
                      type: integer
                      description: >
                        The number of skill matches between the student and the bedrijf.
                        This is used to order the results by relevance.
                      example: 5
                    match_score:
                      type: number
                      format: float
                      description: >
                        A score representing the match between the student and the bedrijf.
                        This is used to order the results by relevance.
                      example: 5
                    match_percentage:
                      type: number
                      format: float
                      description: >
                        A percentage representing the match between the student and the bedrijf.
                        This is used to order the results by relevance.
                      example: 85.5
 
  /bedrijven:
    description: List of companies
    get:
      summary: Get all companies
      tags:
        - Bedrijven
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gebruiker_id:
                      type: integer
                    naam:
                      type: string
                    plaats:
                      type: string
                    contact_email:
                      type: string
                      format: email
                    linkedin:
                      type: string
                      format: uri
                    profiel_foto_key:
                      type: string
                      example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                    profiel_foto_url:
                      type: string
                      format: uri
                      example: 'https://example.com/company_logo.jpg'

  /bedrijven/{bedrijfID}:
    description: Get a specific company by ID
    summary: Get a company by ID
    get:
      summary: Get a company by ID
      tags:
        - Bedrijven
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gebruiker_id:
                    type: integer
                  naam:
                    type: string 
                    example: 'Tech Solutions'
                  plaats:
                    type: string
                  contact_email:
                    type: string
                    format: email
                    example: 'info@techsolutions.com'
                  linkedin:
                    type: string
                    format: uri
                    example: 'https://www.linkedin.com/company/techsolutions'
                  profiel_foto_key:
                    type: string
                    example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                  profiel_foto_url:
                    type: string
                    format: uri
                    example: 'https://example.com/company_logo.jpg'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Company not found'
    put:
      summary: Update a company by ID
      description: >
        This endpoint allows updating a company's information.
        Only the company itself or an admin can update the record.
        At least one field must be provided in the request body.
      tags:
        - Bedrijven
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: 'Company data to update [Note: At least one field must be provided]'
        content:
          application/json:
            schema:
              type: object
              properties:
                naam:
                  type: string
                  example: 'Tech Solutions'
                plaats:
                  type: string
                  example: 'Brussel'
                contact_email:
                  type: string
                  format: email
                  example: 'contact@techsolutions.com'
                linkedin:
                  type: string
                  format: uri
                  example: 'https://www.linkedin.com/company/techsolutions'
                profiel_foto:
                  type: string
                  format: uri
                  example: 'https://example.com/company_logo.jpg'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: 'Company updated successfully'
                    bedrijf:
                      type: object
                      properties:
                        gebruiker_id:
                          type: integer
                          example: 42
                        naam:
                          type: string
                          example: 'Tech Solutions'
                        plaats:
                          type: string
                          example: 'Brussel'
                        contact_email:
                          type: string
                          format: email
                          example: 'contact@techsolutions.com'
                        linkedin:
                          type: string
                          format: uri
                          example: 'https://www.linkedin.com/company/techsolutions'
                        profiel_foto_key:
                          type: string
                          example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                        profiel_foto_url:
                          type: string
                          format: uri
                          example: 'https://example.com/company_logo.jpg'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: 'Company not found'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: 'Forbidden: You can only update your own company record or must be admin.'

  /bedrijven/keur/{bedrijfID}:
    description: Approve or reject a company by ID
    summary: Approve or reject a company
    post:
      summary: Approve or reject a company
      tags:
        - Bedrijven
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Company approved successfully'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Company not found'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Forbidden: You must be an admin to approve or reject companies'

  /bedrijven/goedgekeurd:
    description: List of approved companies
    summary: Get all approved companies
    get:
      summary: Get all approved companies
      tags:
        - Bedrijven
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gebruiker_id:
                      type: integer
                    naam:
                      type: string
                    plaats:
                      type: string
                    contact_email:
                      type: string
                      format: email
                    linkedin:
                      type: string
                      format: uri
                    profiel_foto_key:
                      type: string
                      example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                    profiel_foto_url:
                      type: string
                      format: uri
                      example: 'https://example.com/company_logo.jpg'

  /bedrijven/nietgoedgekeurd:
    description: List of non-approved companies
    summary: Get all non-approved companies
    get:
      summary: Get all non-approved companies
      tags:
        - Bedrijven
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gebruiker_id:
                      type: integer
                    naam:
                      type: string
                    plaats:
                      type: string
                    contact_email:
                      type: string
                      format: email
                    linkedin:
                      type: string
                      format: uri
                    profiel_foto_key:
                      type: string
                      example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                    profiel_foto_url:
                      type: string
                      format: uri
                      example: 'https://example.com/company_logo.jpg'

  /bedrijven/{bedrijfID}/functies:
    description: Get all functions for a specific company
    summary: Get functions by company ID
    get:
      summary: Get all functions for a specific company
      tags:
        - Bedrijven
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    naam:
                      type: string
                      example: 'Parttime'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Forbidden: You can only update your own user record or must be admin.'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'No functions found'
    post:
      summary: Add functions to a company
      tags:
        - Bedrijven
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: >
          List of function IDs to add to the company
        content:
          application/json:
            schema:
              example: [1, 2, 3]
              type: array
              items:
                type: integer

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Functions added successfully'
                  functies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        naam:
                          type: string
                          example: 'Parttime'

  /bedrijven/{bedrijfID}/functies/{functieID}:
    description: Remove a function from a specific company
    summary: Remove a function from a company
    delete:
      summary: Remove a function from a company
      tags:
        - Bedrijven
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
        - name: functieID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Function removed successfully'
                  functies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        naam:
                          type: string
                          example: 'Parttime'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Company or function not found'

  /bedrijven/{bedrijfID}/skills:
    description: Get all skills for a specific company
    summary: Get skills by company ID
    get:
      summary: Get all skills for a specific company
      tags:
        - Bedrijven
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    naam:
                      type: string
                      example: 'JavaScript'
                    type:
                      type: integer
                      description: >
                        The type of skill (0 for skills, 1 for languages)
                      example: 0
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Forbidden: You can only update your own user record or must be admin.'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'No students found'
    post:
      summary: Add skills to a company
      tags:
        - Bedrijven
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: >
          List of skill IDs to add to the company
        content:
          application/json:
            schema:
              example: [1, 2, 3]
              type: array
              items:
                type: integer

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Skills added successfully'
                  skills:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        naam:
                          type: string
                          example: 'JavaScript'
                        type:
                          type: integer
                          description: >
                            The type of skill (0 for skills, 1 for languages)
                          example: 0

  /bedrijven/{bedrijfID}/skills/{skillID}:
    description: Remove a skill from a specific company
    summary: Remove a skill from a company
    delete:
      summary: Remove a skill from a company
      tags:
        - Bedrijven
      parameters:
        - name: bedrijfID
          in: path
          required: true
          schema:
            type: integer
        - name: skillID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Skill removed successfully'
                  skills:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        naam:
                          type: string
                          example: 'JavaScript'
                        type:
                          type: integer
                          description: >
                            The type of skill (0 for skills, 1 for languages)
                          example: 0


  /studenten/{studentID}:
    description: Get a specific student by ID
    get:
      summary: Get a student by ID
      tags:
        - Studenten
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gebruiker_id:
                    type: integer
                  voornaam:
                    type: string
                    example: 'Jan'
                  achternaam:
                    type: string
                    example: 'Jansen'
                  linkedin:
                    type: string
                    format: uri
                  profiel_foto_key:
                    type: string
                    example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                  profiel_foto_url:
                    type: string
                    format: uri
                    example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                  studiejaar:
                    type: integer
                  opleiding_id:
                    type: integer
      '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Student not found'
    put:
      security:
        - bearerAuth: []
      summary: Update a student by ID
      description: >
        This endpoint allows updating a student's information.
        Only the student themselves or an admin can update the record.
        At least one field must be provided in the request body.
      tags:
        - Studenten
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: >
          Student data to update [Note: At least one field must be provided]
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'jan.jansen@example.com'
                password:
                  type: string
                  example: 'password123'
                voornaam:
                  type: string
                  example: 'Jan'
                achternaam:
                  type: string
                  example: 'Jansen'
                linkedin:
                  type: string
                  format: uri
                  example: '/in/janjansen'
                profiel_foto:
                  type: string
                  format: uri
                  example: '/profile.jpg'
                studiejaar:
                  type: integer
                  example: 2
                opleiding_id:
                  type: integer
                  example: 1
                date_of_birth:
                  type: string
                  format: date
                  example: '1970-01-01'
                contact_email:
                  type: string
                  format: email
                  example: 'jan.jansen@example.com'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Student updated successfully'
                  student:
                    type: object
                    properties:
                      gebruiker_id:
                        type: integer
                      voornaam:
                        type: string
                      achternaam:
                        type: string
                      linkedin:
                        type: string
                        format: uri
                      profiel_foto_key:
                        type: string
                        example: '69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                      profiel_foto_url:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPrFUYmc4veo3W4nvKft2iVTm6jpdRUwzCM7Zkh'
                      studiejaar:
                        type: integer
                      opleiding_id:
                        type: integer
                      date_of_birth:
                        type: string
                        format: date
                        example: '2006-05-16'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: 'Student not found'

  /studenten/{studentID}/functies:
    get:
      summary: Get all functions of a student
      tags:
        - Studenten
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    naam:
                      type: string
                      example: 'Parttime'
    post:
      summary: Add a function to a student
      tags:
        - Studenten
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: >
          List of function IDs to add to the student
        content:
          application/json:
            schema:
              example: [1, 2, 3]
              type: array
              items:
                type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Function added successfully'
                  functies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        naam:
                          type: string
                          example: 'Parttime'
  
  /studenten/{studentID}/functies/{functieID}:
    delete:
      summary: Remove a function from a student
      tags:
        - Studenten
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
        - name: functieID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Function removed successfully'
                  functies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        naam:
                          type: string
                          example: 'Parttime'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Student or function not found'

  /studenten/{studentID}/skills:
    get:
      summary: Get all skills of a student
      tags:
        - Studenten
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    naam:
                      type: string
                      example: 'JavaScript'
                    type:
                      type: integer
                      description: >
                        The type of skill (0 for skills, 1 for languages)
                      example: 0
    post:
      summary: Add a skill to a student
      tags:
        - Studenten
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: >
          List of skill IDs to add to the student
        content:
          application/json:
            schema:
              example: [1, 2, 3]
              type: array
              items:
                type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Skill added successfully'
                  skills:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        naam:
                          type: string
                          example: 'JavaScript'
                        type:
                          type: integer
                          description: >
                            The type of skill (0 for skills, 1 for languages)
                          example: 0
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Student or skill not found'

  /studenten/{studentID}/skills/{skillID}:
    delete:
      summary: Remove a skill from a student
      tags:
        - Studenten
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: integer
        - name: skillID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Skill removed successfully'
                  skills:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        naam:
                          type: string
                          example: 'JavaScript'
                        type:
                          type: integer
                          description: >
                            The type of skill (0 for skills, 1 for languages)
                          example: 0
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Student or skill not found'



  /opleidingen:
    description: List of available opleidingen
    post:
      tags:
        - Opleidingen
      summary: 'Create a new opleiding'
      description: 'Create a new opleiding'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  naam:
                    type: string
    get:
      security: []
      tags:
        - Opleidingen
      summary: Get all available opleidingen
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    naam:
                      type: string
                      example: 'Informatica'
                    type:
                      type: string
                      example: 'Bachelor'


  /skills:
    description: List of available skills
    post:
      tags:
        - Skills
      summary: 'Create a new skill'
      description: 'Create a new skill'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                naam:
                  type: string
                  example: 'JavaScript'
                type:
                  type: boolean
                  description: >
                    The type of skill (0 for skills, 1 for languages)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Skill created successfully'
                  skill:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      naam:
                        type: string
                        example: 'JavaScript'
                      type:
                        type: integer
                        description: >
                          The type of skill (0 for skills, 1 for languages)
                        example: 0
    get:
      security: []
      tags:
        - Skills
      summary: Get all available skills
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    naam:
                      type: string
                      example: 'JavaScript'
                    type:
                      type: integer
                      description: >
                        The type of skill (0 for skills, 1 for languages)
                      example: 0
                    

  /skills/{skillID}:
    get:
      summary: Get a specific skill by ID
      tags:
        - Skills
      parameters:
        - name: skillID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  naam:
                    type: string
                    example: 'JavaScript'
                  type:
                    type: integer
                    description: >
                      The type of skill (0 for skills, 1 for languages)
                    example: 0
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Skill not found'
    delete:
      tags:
        - Skills
      summary: 'Delete a skill'
      description: 'Delete a skill by ID'
      parameters:
        - name: skillID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Skill ID is required'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Skill not found'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'An error occurred while deleting the skill'

  /speeddates:
    description: List of the user's speeddates
    post:
      tags:
        - Speeddates
      summary: 'Create a new speed date'
      description: 'Create a new speed date'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_student:
                  type: integer
                  example: 42
                id_bedrijf:
                  type: integer
                  example: 24
                datum:
                  type: string
                  format: date-time
                  example: 'YYYY-MM-DD HH:MM:SS'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Speeddate created successfully'
                  speeddate:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      id_bedrijf:
                        type: integer
                        example: 24
                      naam_bedrijf:
                        type: string
                        example: 'Techsolutions'
                      profiel_foto_bedrijf:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                      sector_bedrijf:
                        type: string
                        example: 'Informatica'
                      id_student:
                        type: integer
                        example: 42
                      voornaam_student:
                        type: string
                        example: 'Jan'
                      achternaam_student:
                        type: string
                        example: 'Jansen'
                      profiel_foto_student:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                      akkoord:
                        type: boolean
                        example: false
                      lokaal:
                        type: string
                        example: 'A101'
                      begin:
                        type: string
                        format: date-time
                        example: '2023-10-01T10:00:00Z'
                      einde:
                        type: string
                        format: date-time
                        example: '2023-10-01T10:10:00Z'
    get:
      tags:
        - Speeddates
      summary: Get all speeddates of user
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
          description: Optional user ID to fetch speeddates for. If omitted, uses the authenticated user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    id_bedrijf:
                      type: integer
                      example: 24
                    naam_bedrijf:
                      type: string
                      example: 'Techsolutions'
                    profiel_foto_bedrijf:
                      type: string
                      format: uri
                      example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                    sector_bedrijf:
                      type: string
                      example: 'Informatica'
                    id_student:
                      type: integer
                      example: 42
                    voornaam_student:
                      type: string
                      example: 'Jan'
                    achternaam_student:
                      type: string
                      example: 'Jansen'
                    profiel_foto_student:
                      type: string
                      format: uri
                      example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                    akkoord:
                      type: boolean
                      example: true
                    begin:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:00:00Z'
                    einde:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:10:00Z'

  /speeddates/history:
    description: List of the user's speed date history
    get:
      tags:
        - Speeddates
      summary: Get all speed date history of user
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
          description: Optional user ID to fetch speed date history for. If omitted, uses the authenticated user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    id_bedrijf:
                      type: integer
                      example: 24
                    naam_bedrijf:
                      type: string
                      example: 'Techsolutions'
                    profiel_foto_bedrijf:
                      type: string
                      format: uri
                      example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                    sector_bedrijf:
                      type: string
                      example: 'Informatica'
                    id_student:
                      type: integer
                      example: 42
                    voornaam_student:
                      type: string
                      example: 'Jan'
                    achternaam_student:
                      type: string
                      example: 'Jansen'
                    profiel_foto_student:
                      type: string
                      format: uri
                      example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                    akkoord:
                      type: boolean
                      example: true
                    lokaal:
                      type: string
                      example: 'A101'
                    begin:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:00:00Z'
                    einde:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:10:00Z'


  /speeddates/{speeddateID}:
    get:
      summary: Get a specific speed date by ID
      tags:
        - Speeddates
      parameters:
        - name: speeddateID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  id_bedrijf:
                    type: integer
                    example: 24
                  naam_bedrijf:
                    type: string
                    example: 'Techsolutions'
                  profiel_foto_bedrijf:
                    type: string
                    format: uri
                    example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                  sector_bedrijf:
                    type: string
                    example: 'Informatica'
                  id_student:
                    type: integer
                    example: 42
                  voornaam_student:
                    type: string
                    example: 'Jan'
                  achternaam_student:
                    type: string
                    example: 'Jansen'
                  profiel_foto_student:
                    type: string
                    format: uri
                    example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                  akkoord:
                    type: boolean
                    example: true
                  lokaal:
                    type: string
                    example: 'A101'
                  begin:
                    type: string
                    format: date-time
                    example: '2023-10-01T10:00:00Z'
                  einde:
                    type: string
                    format: date-time
                    example: '2023-10-01T10:10:00Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Speeddate not found'

  /speeddates/accepted:
    description: List of accepted speed dates
    get:
      tags:
        - Speeddates
      summary: Get all accepted speed dates
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
          description: Optional user ID to fetch accepted speeddates for. If omitted, uses the authenticated user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    id_bedrijf:
                      type: integer
                      example: 24
                    naam_bedrijf:
                      type: string
                      example: 'Techsolutions'
                    profiel_foto_bedrijf:
                      type: string
                      format: uri
                      example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                    sector_bedrijf:
                      type: string
                      example: 'Informatica'
                    id_student:
                      type: integer
                      example: 42
                    voornaam_student:
                      type: string
                      example: 'Jan'
                    achternaam_student:
                      type: string
                      example: 'Jansen'
                    profiel_foto_student:
                      type: string
                      format: uri
                      example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                    akkoord:
                      type: boolean
                      example: true
                    lokaal:
                      type: string
                      example: 'A101'
                    begin:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:00:00Z'
                    einde:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:10:00Z'

  /speeddates/pending:
    description: List of pending speed dates
    get:
      tags:
        - Speeddates
      summary: Get all pending speed dates
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
          description: Optional user ID to fetch pending speeddates for. If omitted, uses the authenticated user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    id_bedrijf:
                      type: integer
                      example: 24
                    naam_bedrijf:
                      type: string
                      example: 'Techsolutions'
                    profiel_foto_bedrijf:
                      type: string
                      format: uri
                      example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                    sector_bedrijf:
                      type: string
                      example: 'Informatica'
                    id_student:
                      type: integer
                      example: 42
                    voornaam_student:
                      type: string
                      example: 'Jan'
                    achternaam_student:
                      type: string
                      example: 'Jansen'
                    profiel_foto_student:
                      type: string
                      format: uri
                      example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                    akkoord:
                      type: boolean
                      example: false
                    lokaal:
                      type: string
                      example: 'A101'
                    begin:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:00:00Z'
                    einde:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:10:00Z'
                  
  /speeddates/accept/{speeddateID}:
    description: Accept a speed date
    post:
      tags:
        - Speeddates
      summary: Accept a speed date
      parameters:
        - name: speeddateID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Speeddate accepted successfully'
                  speeddate:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      id_bedrijf:
                        type: integer
                        example: 24
                      naam_bedrijf:
                        type: string
                        example: 'Techsolutions'
                      profiel_foto_bedrijf:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                      sector_bedrijf:
                        type: string
                        example: 'Informatica'
                      id_student:
                        type: integer
                        example: 42
                      voornaam_student:
                        type: string
                        example: 'Jan'
                      achternaam_student:
                        type: string
                        example: 'Jansen'
                      profiel_foto_student:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                      akkoord:
                        type: boolean
                        example: true
                      lokaal:
                        type: string
                        example: 'A101'
                      begin:
                        type: string
                        format: date-time
                        example: '2023-10-01T10:00:00Z'
                      einde:
                        type: string
                        format: date-time
                        example: '2023-10-01T10:10:00Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Speeddate not found'

  /speeddates/reject/{speeddateID}:
    description: Reject a speed date
    post:
      tags:
        - Speeddates
      summary: Reject a speed date
      parameters:
        - name: speeddateID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Speeddate rejected successfully'
                  speeddate:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      id_bedrijf:
                        type: integer
                        example: 24
                      naam_bedrijf:
                        type: string
                        example: 'Techsolutions'
                      profiel_foto_bedrijf:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                      sector_bedrijf:
                        type: string
                        example: 'Informatica'
                      id_student:
                        type: integer
                        example: 42
                      voornaam_student:
                        type: string
                        example: 'Jan'
                      achternaam_student:
                        type: string
                        example: 'Jansen'
                      profiel_foto_student:
                        type: string
                        format: uri
                        example: 'https://gt0kk4fbet.ufs.sh/f/69hQMvkhSwPraCGnNWS7L1K2vb4pIFAPBaNtzcZmEqjTrw9n'
                      akkoord:
                        type: boolean
                        example: true
                      lokaal:
                        type: string
                        example: 'A101'
                      begin:
                        type: string
                        format: date-time
                        example: '2023-10-01T10:00:00Z'
                      einde:
                        type: string
                        format: date-time
                        example: '2023-10-01T10:10:00Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Speeddate not found'

  /speeddates/user/{userID}/unavailable:
    description: List of unavailable dates for a user
    get:
      tags:
        - Speeddates
      summary: Get all unavailable dates for a user
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    begin:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:00:00Z'
                    einde:
                      type: string
                      format: date-time
                      example: '2023-10-01T10:10:00Z'

  /stands:
    description: List of available stands
    post:
      tags:
        - Stands
      summary: 'Create a new stand'
      description: 'Create a new stand'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lokaal:
                  type: string
                  example: 'A101'
                id_bedrijf:
                  type: integer
                  example: 42
      responses:
        '201':
          description: Created
    get:
      tags:
        - Stands
      summary: Get all available stands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    lokaal:
                      type: string
                      example: 'A101'
                    id_bedrijf:
                      type: integer
                      example: 42

  /stands/{standID}:
    description: Get a specific stand by ID
    get:
      summary: Get a stand by ID
      tags:
        - Stands
      parameters:
        - name: standID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  lokaal:
                    type: string
                    example: 'A101'
                  id_bedrijf:
                    type: integer
                    example: 42
    delete:
      tags:
        - Stands
      summary: 'Delete a stand'
      description: 'Delete a stand'
      parameters:
        - name: standID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content